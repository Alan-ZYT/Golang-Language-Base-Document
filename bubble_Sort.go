/*

	冒泡排序
	排序过程

    1.将第一个记录的关键字与第二个记录的关键字进行比
	较，若为逆序 r[1].key>r[2].key 则交换；然后比较
	第二个记录与第三个记录；依次类推，直至第 n 1 个
	记录和第 n 个记录比较为止 第一趟冒泡排序，结
	果关键字最大的记录被安置在最后一个记录上

	2.对前 n 1 个记录进行第二趟冒泡排序，结果使关键字
	次大的记录被安置在第 n 1 个记录位置

	3.重复上述过程，直到“在一趟排序过程中没有进行过
	交换记录的操作”为止

*/

package main

import "fmt"

var s = []int{1, 2, 3, 6, 5, 4, 8, 7, 9, 11, 2, 3, 4, 45, 6, 78, 9, 0, 1314, 3322, 4, 5667, 899654, 456789, 544}
// 方法1
func main() {
	for i := 0; i < len(s); i++ {
		for j := 0; j < i; j++ {
			if s[i] > s[j] {
				s[i], s[j] = s[j], s[i]
			}
		}
	}

	for _, v := range s {
		fmt.Println(v)
	}


// 方法1
	// 未排序数组
	sort := [...]int{1, 2, 3, 6, 5, 4, 8, 7, 9, 11, 2, 3, 4, 45, 6, 78, 9, 0, 1314, 3322, 4, 5667, 899654, 456789, 544}
	fmt.Println(sort)
	// 优化性能
	num := len(sort) 
	// 冒泡排序，由大到小
	for i := 0; i < num; i++ {
		for j := i + 1; j < num; j++ {
			if sort[i] < sort[j] {
				sort[i], sort[j] = sort[j], sort[i]
			}
		}
	}
	fmt.Println(sort)
}

